
Student Name: ___Yerboluly Yernar_____________________

Please, send it to pakita.kbtu@gmail.com

1.	A Simple Example: 

    This part of the lab considers a simple example of exception handling.

1.	Open Example1.java 
2.	Compile and execute the application Example1.

What was output by the application when you executed it?
The answer is: 2
Done.

3.	Change the value of denominator to 0.
4.	Re-compile and re-execute Example1.
    

    What "error" was generated by the application when you executed it?
Exception in thread "main" java.lang.ArithmeticException: / by zero


    Why was this "error" generated at run-time (rather than at compile-time)?


5.	Add a try-catch statement.  Specifically, put only the statement that generated the exception inside of the try block and put no statements in the catch block.  (Hint: You should be able to determine what exception to catch and what line generated the exception from the error message that you received during the previous step.)
    

    Re-compile Example1.

   What error is generated and why?
The local variable ratio may not have been initialized
  
6.	Move the "output statement" into the try block (as well).
7.	Add the statement System.out.println("Divide by 0."); to the catch block.
    
    Re-compile and re-execute Example1.

    What output was generated?
   Divide by 0
   Done.

8.    Add a call to the printStackTrace() method of the  ArithmeticException to the end of the catch block.
    
    Re-compile and re-execute Example1.
    
    What output was generated?
Divide by 0
java.lang.ArithmeticException: / by zero
	at lab6.example1.main(example1.java:15)
Done.

    Did the application execute properly or not?
       Yes ,it did.
2.	A More Complicated Example: 

  This part of the lab considers an example of exception handling within and outside of block statements.

	Open Example2.java    

	Compile Example2.

    What error was generated?
	Unresolved compilation problems: 
	The local variable i may not have been initialized
	The local variable i may not have been initialized


	Initialize i to 0 inside of the try block (but before the for loop).
    
	Compile Example2.

    What error was generated?
        Unresolved compilation problems: 
	The local variable i may not have been initialized
	The local variable i may not have been initialized

	It is not possible for i to be used before it is initialized.  Why is this error generated anyway? (Hint: Think about block statements.)
if we will use variable that is not initialized, that could generate error. It is better to use in appropriate way.

	Move the initialization of i before the  try block.
    
	Compile and execute Example2.
    
    What output is generated?
100/10=10
Couldn't calculate 10/0
    Why aren't all of the divisions even attempted?
Try block stops executing code inside of it as soon as it catches the first exeption.

	Fix Example2 so that it executes properly. (Hint: Move the try-catch block inside of the
  for block.)  What did you change? What has happened?
i moved try-catch block inside of for loop.Then it is executed appropriatly
100/10=10
Couldn't calculate 10/0
0/5=0
5/2=2
2/8=0
Couldn't calculate 8/0
0/30=0

    
3.	An Inappropriate Use of Exception Handling

This part of the lab considers an inappropriate use of exception handling  and how to "fix" it.

	Compile and execute Example3 and verify that  it outputs all of the values followed by the word "Done".

	Modify Example3 so that it loops "properly" and does not need to use a try-catch statement.  (Note: The output  should not change.)    What did you change?
i deleted try-catch block then i changed the for like for (i=0; i < 5; i++) so and outside of for loop there were code to execude the word Done.

4.	Some Other Exceptions

  This part of the lab will give you some experience with some other exceptions, where they arise, and how they can be used.

	What functionality does a StringTokenizer object provide? Give example.
The StringTokenizer allows to break a string into a pieces by certain delimeter. 
StringTokenizer st=new StringTokenizer("Yerboluly Yernar"," ")
here string is divided by space
	What are the three formal parameters of the explicit value  constructor in the StringTokenizer class? Give example.
String itself,delimeter,boolean value to determine to show delimeter or not to.
	Run Example4.java.
 
	After running the program  write the following to the command line: 5.3+9.2

    What output is generated?
Result: 14.5

	Now run it again and enter the following:  5.3+

   What output is generated?
Invalid syntax

    Why?  In particular, what exception is thrown and why?
we did not give second operand .NoSuchElementException is thrown, cause it was the end of string 

	Run again and enter 5.3+a.

What output is generated?

One or more operands is not a number
Why?  In particular, what exception is thrown and why?
Operand is not a number. NumberFormatException was thrown, because second operand is not of double type.
5. Programming Practice 

	Modify Example4.java so that it supports addition (+), subtraction (-), multiplication (*), and division (/).
    

	Modify Example4.java so that it processes more than just one expression for evaluation.   So, for example, it should be able to be execute the following input: 
    
                4 5.0+4.1 3.2*9.1.
    

	Modify Example4.java so that it tells you which operand is not a number.  (Hint: You may need to use nested try-catch blocks.)
    

My programs (modified): (paste directly from eclipse)

Example1 
package lab6;

import java.lang.ArithmeticException;

public class example1 {
	   public static void main(String[] args)
	    {
		   
		int     denominator, numerator, ratio;


		numerator   = 5;
		denominator = 0;
        try {
	    ratio = numerator / denominator;
		
			System.out.println("The answer is: "+ratio);
		}
        catch(ArithmeticException a){
			System.out.println("Divide by 0");
			a.printStackTrace();
			
		}
		   
        
		System.out.println("Done."); // Don't move this line
	    }
}

Example2
package lab6;

public class example2 {
	public static void main(String[] args)
    {
	int        i=0, ratio;
	int[]      numbers = {100,10,0,5,2,8,0,30};
	 for (i=0; i < numbers.length-1; i++) {
		 
	    try
        {  
		ratio = numbers[i] / numbers[i+1];
		System.out.println(numbers[i]+"/"+numbers[i+1]+"="+ratio);
	      } 
	 
        catch (ArithmeticException ae)
        {
	    System.out.println("Couldn't calculate "+
			       numbers[i]+"/"+numbers[i+1]);
	}
	 }
    }
}

Example3
package lab6;

public class example3 {
	public static void main(String[] args)
    {
	int              i;
	int[]            data = {50, 320, 97, 12, 2000};



	    for (i=0; i < 5; i++)
            {
		System.out.println(data[i]);
	    }

	    System.out.println("Done");
	
    
}}

Example4
package lab6;
import java.util.*;
public class example4 {
	 public static void main(String[] args)
	    {
	       double                 leftOperand, result, rightOperand;
	       String                 leftString, operator, rightString;
	       StringTokenizer        tokenizer;
	       Scanner in = new Scanner(System.in);

	       tokenizer = new StringTokenizer(in.nextLine(), "+", true);

	       try
	       {
	          leftString   = tokenizer.nextToken();
	          operator     = tokenizer.nextToken();
	          rightString  = tokenizer.nextToken();

	          leftOperand  = Double.parseDouble(leftString);
	          rightOperand = Double.parseDouble(rightString);

	          if (operator.equals("+"))
	             result = leftOperand + rightOperand;
	          else if (operator.equals("-"))
	            result = leftOperand - rightOperand;
	          else if (operator.equals("*"))
	            result = leftOperand * rightOperand;
	          else if (operator.equals("/"))
	            result = leftOperand / rightOperand;
	          else result = 0.0;

	          System.out.println("Result: " + result);
	       }
	       catch (NoSuchElementException nsee)
	       {
	          System.out.println("Invalid syntax");
	       }
	       catch (NumberFormatException nfe)
	       {
	          System.out.println("One or more operands is not a number");
	       }
	       in.close();

	    }
	}
